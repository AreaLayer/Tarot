syntax = "proto3";

package tarorpc;

option go_package = "github.com/lightninglabs/taro/tarorpc";

service Taro {
    /* tarocli: `assets mint`
    MintAsset will attempts to mint the set of assets (async by default to
    ensure proper batching) specified in the request.
    */
    rpc MintAsset (MintAssetRequest) returns (MintAssetResponse);

    /* tarocli: `assets list`
    ListAssets lists the set of assets owned by the target daemon.
    */
    rpc ListAssets (ListAssetRequest) returns (ListAssetResponse);

    /* tarocli: `assets utxos`
    ListUtxos lists the UTXOs managed by the target daemon, and the assets they
    hold.
    */
    rpc ListUtxos (ListUtxosRequest) returns (ListUtxosResponse);

    /* tarocli: `assets groups`
    ListGroups lists the asset groups known to the target daemon, and the assets
    held in each group.
    */
    rpc ListGroups (ListGroupsRequest) returns (ListGroupsResponse);

    /* tarocli: `assets balance`
    ListBalances lists asset balances
    */
    rpc ListBalances (ListBalancesRequest) returns (ListBalancesResponse);

    /* tarocli: `assets transfers`
    ListTransfers lists outbound asset transfers tracked by the target daemon.
    */
    rpc ListTransfers (ListTransfersRequest) returns (ListTransfersResponse);

    /* tarocli: `stop`
    StopDaemon will send a shutdown request to the interrupt handler, triggering
    a graceful shutdown of the daemon.
    */
    rpc StopDaemon (StopRequest) returns (StopResponse);

    /* tarocli: `debuglevel`
    DebugLevel allows a caller to programmatically set the logging verbosity of
    tarod. The logging can be targeted according to a coarse daemon-wide logging
    level, or in a granular fashion to specify the logging for a target
    sub-system.
    */
    rpc DebugLevel (DebugLevelRequest) returns (DebugLevelResponse);

    /* tarocli: `addrs query`
    QueryTaroAddrs queries the set of Taro addresses stored in the database.
    */
    rpc QueryAddrs (QueryAddrRequest) returns (QueryAddrResponse);

    /* tarocli: `addrs new`
    NewAddr makes a new address from the set of request params.
    */
    rpc NewAddr (NewAddrRequest) returns (Addr);

    /* tarocli: `addrs decode`
    DecodeAddr decode a Taro address into a partial asset message that
    represents the asset it wants to receive.
    */
    rpc DecodeAddr (DecodeAddrRequest) returns (Addr);

    /* tarocli: `addrs receives`
    List all receives for incoming asset transfers for addresses that were
    created previously.
    */
    rpc AddrReceives (AddrReceivesRequest) returns (AddrReceivesResponse);

    /* tarocli: `proofs verify`
    VerifyProof attempts to verify a given proof file that claims to be anchored
    at the specified genesis point.
    */
    rpc VerifyProof (ProofFile) returns (ProofVerifyResponse);

    /* tarocli: `proofs export`
    ExportProof exports the latest raw proof file anchored at the specified
    script_key.
    */
    rpc ExportProof (ExportProofRequest) returns (ProofFile);

    /* tarocli: `proofs import`
    ImportProof attempts to import a proof file into the daemon. If successful,
    a new asset will be inserted on disk, spendable using the specified target
    script key, and internal key.
    */
    rpc ImportProof (ImportProofRequest) returns (ImportProofResponse);

    /* tarocli: `assets send`
    SendAsset uses a passed taro address to attempt to complete an asset send.
    The method returns information w.r.t the on chain send, as well as the
    proof file information the receiver needs to fully receive the asset.
    */
    rpc SendAsset (SendAssetRequest) returns (SendAssetResponse);

    /*
    SubscribeSendAssetEventNtfns registers a subscription to the event
    notification stream which relates to the asset sending process.
    */
    rpc SubscribeSendAssetEventNtfns (SubscribeSendAssetEventNtfnsRequest)
        returns (stream SendAssetEvent);
}

enum AssetType {
    /*
    Indicates that an asset is capable of being split/merged, with each of the
    units being fungible, even across a key asset ID boundary (assuming the
    key group is the same).
    */
    NORMAL = 0;

    /*
    Indicates that an asset is a collectible, meaning that each of the other
    items under the same key group are not fully fungible with each other.
    Collectibles also cannot be split or merged.
    */
    COLLECTIBLE = 1;
}
message MintAssetRequest {
    // The type of the asset to be created.
    AssetType asset_type = 1;

    // The name, or "tag" of the asset. This will affect the final asset ID.
    string name = 2;

    /*
    An opaque blob that resents metadata related to the asset. This will affect
    the final asset ID.
    */
    bytes meta_data = 3;

    /*
    The total amount of units of the new asset that should be created. If the
    AssetType is Collectible, then this field cannot be set.
    */
    int64 amount = 4;

    /*
    The specific group key this asset should be minted with.
    */
    bytes group_key = 5;

    /*
    If true, then the asset will be created with a key group, which allows for
    future asset issuance.
    */
    bool enable_emission = 6;

    /*
    If true, then a batch will be created immediately. Otherwise the asset
    creation transaction may be batched with other pending minting requests.
    */
    bool skip_batch = 7;
}

message MintAssetResponse {
    /*
    A public key serialized in compressed format that can be used to uniquely
    identify a pending minting batch. Responses that share the same key will be
    batched into the same minting transaction.
    */
    bytes batch_key = 1;
}

message ListAssetRequest {
    bool with_witness = 1;
}

message AnchorInfo {
    // The transaction that anchors the Taro commitment where the asset resides.
    bytes anchor_tx = 1;

    // The txid of the above transaction.
    string anchor_txid = 2;

    // The block hash the contains the anchor transaction above.
    bytes anchor_block_hash = 3;

    // The outpoint (txid:vout) that stores the Taro commitment.
    string anchor_outpoint = 4;

    /*
    The raw internal key that was used to create the anchor Taproot output key.
    */
    bytes internal_key = 5;
}

message GenesisInfo {
    // The first outpoint of the transaction that created the asset (txid:vout).
    string genesis_point = 1;

    // The name of the asset.
    string name = 2;

    // The opaque meta data of the asset.
    bytes meta = 3;

    // The asset ID that uniquely identifies the asset.
    bytes asset_id = 4;

    /*
    The index of the output that carries the unique Taro commitment in the
    genesis transaction.
    */
    uint32 output_index = 5;

    /*
    The full genesis information encoded in a portable manner so it can be
    easily copy/pasted for address creation.
    */
    bytes genesis_bootstrap_info = 6;

    // The version of the Taro commitment that created this asset.
    int32 version = 7;
}

message AssetGroup {
    // The raw group key which is a normal public key.
    bytes raw_group_key = 1;

    /*
    The tweaked group key, which is derived based on the genesis point and also
    asset type.
    */
    bytes tweaked_group_key = 2;

    // A signature over the genesis point using the above key.
    bytes asset_id_sig = 3;
}

message Asset {
    // The version of the Taro asset.
    int32 version = 1;

    // The base genesis information of an asset. This information never changes.
    GenesisInfo asset_genesis = 2;
